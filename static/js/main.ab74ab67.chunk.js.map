{"version":3,"sources":["components/SearchResult.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","state","className","this","props","results","map","image","href","user","links","html","alt","target","src","urls","small","key","id","username","Component","API_KEY","SearchBar","value","searchResult","handleChange","e","setState","handleSubmit","preventDefault","searchValue","axios","get","then","res","data","onSubmit","type","placeholder","onChange","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRA0BeA,G,iNAxBXC,MAAQ,G,wEAEJ,OACA,yBAAKC,UAAU,iBACZC,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GAAK,OACzB,6BACI,uBAAGC,KAAQD,EAAME,KAAKC,MAAMC,KAAMC,IAAI,iBAAiBC,OAAO,UAC9D,yBAAKX,UAAU,WAAWY,IAAKP,EAAMQ,KAAKC,MAAOJ,IAAI,eAChDK,IAAKV,EAAMW,KACX,yBAAKhB,UAAU,UACZ,uBAAGA,UAAU,QAAQK,EAAME,KAAKU,qB,GAX/BC,c,iBCErBC,EAAO,mEAwCEC,E,2MAtCXrB,MAAQ,CACJsB,MAAM,GACNC,aAAa,I,EAGjBC,aAAe,SAACC,GACX,EAAKC,SAAS,CACZJ,MAAMG,EAAEb,OAAOU,S,EAGtBK,aAAe,SAACF,GACfA,EAAEG,iBACF,IAAMC,EAAc,EAAK7B,MAAMsB,MAC/BQ,IAAMC,IAAN,4DAA+DX,EAA/D,oDAAkHS,EAAlH,MAAkIG,MAAK,SAAAC,GAC/H,EAAKP,SAAS,CAEVH,aAAcU,EAAIC,KAAK9B,c,wEAKhC,OACI,yBAAKH,UAAU,gBACf,0BAAMkC,SAAUjC,KAAKyB,aAAc1B,UAAU,oBAC7C,2BACAA,UAAU,kBACVmC,KAAK,OACLd,MAAOpB,KAAKF,MAAMsB,MAClBe,YAAY,mBACZC,SAAUpC,KAAKsB,eACf,4BAAQvB,UAAU,cAAcmC,KAAK,UAAS,uBAAGG,MAAM,mBAEtD,kBAAC,EAAD,CAAcnC,QAASF,KAAKF,MAAMuB,oB,GAjCvBJ,aCWTqB,E,2MAVbxC,MAAQ,G,wEAEN,OACE,yBAAKC,UAAU,kBACb,kBAAC,EAAD,W,GALUkB,a,MCQEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.ab74ab67.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass SearchResult extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n        <div className=\"image-results\">\r\n          {this.props.results.map(image => (\r\n              <div>\r\n                  <a href = {image.user.links.html} alt=\"linktounsplash\" target=\"_blank\"> \r\n                  <img className=\"img-list\" src={image.urls.small} alt=\"searchresult\"\r\n                       key={image.id}/>\r\n                       <div className=\"middle\">\r\n                          <p className=\"text\">{image.user.username}</p>\r\n                        \r\n                      </div>\r\n                      </a>\r\n  \r\n\r\n              </div>\r\n\r\n          ))}\r\n      </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SearchResult;","import React, { Component } from 'react';\r\nimport SearchResult from './SearchResult.js'\r\nimport axios from 'axios';\r\nconst API_KEY = `ac356e08f41d089bde14be73130c16e0eaf431df86778ce010f73665a5bb7b37`\r\nclass SearchBar extends Component {\r\n    state = { \r\n        value:'',\r\n        searchResult:[]\r\n     }\r\n\r\n    handleChange = (e) =>{\r\n         this.setState({\r\n           value:e.target.value\r\n         })\r\n     }\r\n    handleSubmit = (e) =>{\r\n     e.preventDefault()\r\n     const searchValue = this.state.value\r\n     axios.get(`https://api.unsplash.com/search/photos/?client_id=${API_KEY}&per_page=15&orientation=landscape&query=${searchValue}}`).then(res => {\r\n             this.setState({\r\n                 \r\n                 searchResult: res.data.results\r\n             })     \r\n })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"searchbardiv\">\r\n            <form onSubmit={this.handleSubmit} className=\"search-container\">\r\n            <input\r\n            className=\"field-container\"\r\n            type='text'\r\n            value={this.state.value}\r\n            placeholder=\"Search Images...\"\r\n            onChange={this.handleChange}/>   \r\n            <button className=\"btn-warning\" type=\"submit\"><i class=\"fa fa-search\"></i></button>\r\n            </form>\r\n             <SearchResult results={this.state.searchResult}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SearchBar;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar.js';\n\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <div className=\"main-container\">\n        <SearchBar/>\n      </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}